// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Role
enum Role {
  READER
  AUTHOR
}

// User
model User {
  userId    Int        @id @default(autoincrement()) // PK
  firstName String
  lastName  String
  email     String     @unique
  phone     String     @unique
  password  String
  role      Role
  blogs     Blog[] // Author can have multiple Blogs 
  comments  Comment[] // User can have multiple Comments
  reactions Reaction[] // User can have multiple Reactions
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Blog
model Blog {
  blogId    Int        @id @default(autoincrement()) // PK
  imageLink String?
  title     String
  content   String
  comments  Comment[] // Blog can have multiple Comments
  author    User       @relation(fields: [authorId], references: [userId], onDelete: Cascade)
  authorId  Int // FK -> Points to userId in User Model
  reactions Reaction[] // Blog can have multiple Reactions
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

// Comment
model Comment {
  commentId Int      @id @default(autoincrement()) // PK
  comment   String
  blog      Blog     @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
  blogId    Int // FK -> Points to blogId in Blog Model
  user      User     @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId    Int // FK -> Points to userId in User Model
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Reaction Type
enum ReactionType {
  LIKE
  DISLIKE
}

// Reaction
model Reaction {
  reactionId Int          @id @default(autoincrement())
  type       ReactionType
  user       User         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  userId     Int // FK -> Points to userId in User Model
  blog       Blog         @relation(fields: [blogId], references: [blogId], onDelete: Cascade)
  blogId     Int // FK -> Points to blogId in Blog Model
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}
